**Отчет по заданию: Корректность программ. Эталоны и методы проверки корректности**

---

### **Теоретическая часть**

1. **Корректность программы**  
   - **Определение:** Программа считается корректной, если она соответствует своей спецификации, т.е. выполняет то, что от нее ожидается, при соблюдении предусловий.  
   - **Отличие от надежности:** Надежность — это способность программы работать без сбоев в различных условиях, включая некорректные входные данные. Корректность же относится только к соответствию спецификации.  
   - **Пример:** Программа, которая всегда возвращает 0, надежна (не падает), но некорректна, если должна вычислять среднее значение.

2. **Эталоны (спецификации) корректности**  
   - **Спецификация** — это формальное описание того, что программа должна делать. Она необходима для определения корректности.  
   - **Виды спецификаций:**  
     - **Функциональные требования:** Что программа должна делать.  
     - **Предусловия:** Условия, которые должны быть выполнены перед вызовом функции.  
     - **Постусловия:** Условия, которые гарантируются после выполнения функции.  
     - **Инварианты:** Условия, которые сохраняются на протяжении всей работы функции.  
   - **Для функции `calculate_positive_average(numbers)`:**  
     - **Предусловие:** `numbers` — это список чисел (не пустой, если не оговорено иное).  
     - **Постусловие:** Функция возвращает среднее арифметическое положительных элементов или 0, если таких элементов нет.

3. **Методы проверки корректности**  
   - **Тестирование:**  
     - **Суть:** Проверка работы программы на конкретных входных данных.  
     - **Сильные стороны:** Простота, наглядность.  
     - **Слабые стороны:** Не покрывает все возможные случаи.  
     - **Тестовый сценарий:** Набор входных данных и ожидаемых результатов.  
   - **Статический анализ:**  
     - **Суть:** Анализ кода без его выполнения для выявления потенциальных ошибок.  
     - **Пример инструмента:** Pylint (ловит синтаксические ошибки, неиспользуемые переменные).  
   - **Формальные методы:**  
     - **Идея:** Математическое доказательство корректности программы.  
     - **Инвариант цикла:** Условие, которое сохраняется на каждой итерации цикла.  
   - **Сравнение:**  
     - Для небольшой функции подходит тестирование.  
     - Для большой системы — статический анализ и формальные методы.

---

### **Практическая часть**

#### **1. Спецификация функции `calculate_positive_average`**
- **Предусловие:**  
  - `numbers` — это список чисел (тип `list`).  
  - Список может быть пустым.  
- **Постусловие:**  
  - Функция возвращает среднее арифметическое положительных элементов или 0, если таких элементов нет.  
- **Инвариант цикла:**  
  - На каждой итерации:  
    - `total` — сумма всех положительных элементов, обработанных на данный момент.  
    - `count` — количество таких элементов.  

#### **2. Ручное тестирование**
| Входные данные (`numbers`) | Ожидаемый результат | Фактический результат | Прошел? |
|---------------------------|---------------------|-----------------------|---------|
| `[1, 2, 3, -4]`           | `2.0`               | `2.0`                 | Да      |
| `[-1, -2, -3]`            | `0`                 | `0`                   | Да      |
| `"строка"`                | Ошибка (не список)  | Ошибка (TypeError)    | Да      |

#### **3. Анализ корректности и ошибок**
- **Строка A (`average = total / count`):**  
  Деление на ноль невозможно, так как условие `if count > 0` гарантирует, что `count` положителен.  
- **Пустой список:**  
  Функция корректно возвращает 0, что соответствует постусловию.  
- **Нарушение предусловия (например, строка вместо списка):**  
  Возникает ошибка `TypeError`. Для улучшения можно добавить проверку типа:  
  ```python
  if not isinstance(numbers, list):
      raise TypeError("Input must be a list")
  ```

#### **4. Выводы**
- **Корректность функции:**  
  Функция корректна относительно своей спецификации, так как проходит все тестовые случаи.  
- **Метод проверки для строки A:**  
  Статический анализ мог бы выявить потенциальное деление на ноль, если бы проверка `count > 0` отсутствовала.
---

### **Файлы отчета**
1. **Дописанная программа (`test3.py`):**  
   ```python
   def calculate_positive_average(numbers):
       """
       Вычисляет среднее арифметическое положительных элементов в списке `numbers`.
       Возвращает 0, если положительных элементов нет.
       """
       if not isinstance(numbers, list):
           raise TypeError("Input must be a list")
       total = 0
       count = 0
       for num in numbers:
           if num > 0:
               total += num
               count += 1
       if count > 0:
           average = total / count  # Строка A
       else:
           average = 0
       return average
   ```

2. **Теоретическая часть:** Ответы приведены выше.  
3. **Практическая часть:** Результаты анализа и тестирования представлены в отчете.  

--- 

**Итог:** Функция корректна, но требует дополнительной проверки входных данных для повышения надежности.  
